extends base

- load widget_tweaks
- load brabeion_tags
- load humanize
- load group

block header
  - with headerMessage=group.name
    include includes/header

block content

  .container
    - if messages
      - for message in messages
        - if 'safe' in message.tags
          .row
            .col-xs-10.col-xs-offset-1
              div(class='{{ message.tags }}').alert
                {{ message|safe }}

  .container
    .row
      - if group.description
        .col-md-10.col-md-offset-1.head-space
          p.lead #{group.description}

      .col-md-10.col-md-offset-1.head-space
        - with progress=group.percentage_complete
          - if progress
            h4.progress-label Community progress on this set:
            .progress
              div(role='progressbar', aria-valuenow='{{ progress }}', aria-valuemin='0', aria-valuemax='100', style='width: {{progress}}%;').progress-bar.active
                #{progress|floatformat:"2"}%

  #group-network.container-fluid
    .row
      .col-xs-4.col-xs-offset-4
        a
          h4.text-center Toggle Network
    #network-row(style="height:800px;display:none;").row
      .col-xs-1
        .row
          .col-xs-12
            i.fa.fa-plus-circle
          .col-xs-12
            i.fa.fa-minus-circle
          .col-xs-12
            i.fa.fa-rotate-right
      .col-xs-11
        #network(style="height:800px;")

      //- if request.user|has_group:"Comment Moderators"
      //  #chart.col-md-10.col-md-offset-1.head-space.text-center


  .container
    .row
      .col-md-10.col-md-offset-1
        #group-selection




block post-footer
    #fb-root

    script.
      $('#group-network h4').click(function() {
        $('#network-row').toggle(function() {
          s.refresh();
          s.refresh();
        });
      });


      var username = "{{user.username}}";
      var s = new sigma({
        container: 'network',
        settings: {

          defaultLabelColor: "#000",
          defaultLabelSize: 12,
          defaultLabelBGColor: "#ddd",
          defaultHoverLabelBGColor: "#002147",
          defaultLabelHoverColor: "#fff",

          edgeColor: 'default',
          defaultEdgeColor: '#e7e7e7',

          labelThreshold: 10,
          defaultEdgeType: 'curve',

          hoverFontStyle: "bold",
          fontStyle: "regular",
          activeFontStyle: "regular",

          minNodeSize: 4,
          maxNodeSize: 8,
          minEdgeSize: 1,
          maxEdgeSize: 1,

          zoomMin: .00001,
          zoomMax: 1,
        }
      });


      var filter = new sigma.plugins.filter(s);

      sigma.parsers.json('/api/network/{{group.pk}}/', s, function() {
        s.refresh();

        maxDegree = 0;
        s.graph.nodes().forEach(function(n) {
          maxDegree = Math.max(maxDegree, s.graph.degree(n.id));
        });
        $('#min-degree').attr('max', maxDegree/3)

      });
      s.refresh();
      s.bind('hoverNode clickNode', function(e) {
        console.log(e.type, e.data.node.label, e.data.captor);
        if(e.type == 'clickNode') {
          window.open('https://www.google.com/#safe=off&q='+e.data.node.label,'_blank');
        }
      });

      $('#min-degree').on('change', function() {
        var min_degree_num = $(this).val();

        $('#min-degree-val').html(min_degree_num);
        filter
          .undo('min-degree')
          .nodesBy(function(n) {
            return this.degree(n.id) >= min_degree_num;
          }, 'min-degree').apply();
      });

      $('#personal-contributions').on('click', function() {
        var checked = $(this).is(':checked');
        s.graph.edges().forEach(function(e) {
          if(e.attributes.user == username) {
            e.color = checked ? 'black' : '#e7e7e7';
          }
        });
        s.refresh();
      });

      $('#username-search').on('keyup', function() {
        var term = $(this).val();
        if(term) {
          filter
            .undo('edge-contributor')
            .edgesBy(function(edge) {
              return edge.attributes.user.indexOf(term) > -1
            }, 'edge-contributor').apply();
        } else {
          filter.undo('edge-contributor').apply();
        }
      });

      $('#reset-btn').on('click', function() {
        $('#personal-contributions').removeProp('checked');
        $('#username-search').val('');
        filter.undo().apply();
      });

      $('#network-row i.fa-plus-circle').click(function() {
        var c = s.camera;
        sigma.misc.animation.camera(c, {
          ratio: c.ratio / c.settings('zoomingRatio')
        }, { duration: 250 });
      });

      $('#network-row i.fa-minus-circle').click(function() {
        var c = s.camera;
        sigma.misc.animation.camera(c, {
          ratio: c.ratio * c.settings('zoomingRatio')
        }, { duration: 250 });
      });

      $('#network-row i.fa-rotate-right').click(function() {
        var c = s.camera;
        c.goTo({
          angle: c.angle -= .1
        });
      });


    script.
      var draw_dashboard = function(group, quests) {
        $('#group-'+ group.pk).html('');
        var canvas = d3.select('#group-'+ group.pk);

        var available_quests = _.filter(quests, function(item) { return item.enabled && !item.completed });
        var completion_size = _.map(available_quests, function(item) { return item.completions; });

        var completion_scale = d3.scale.linear()
          .domain([_.min(completion_size), _.max(completion_size)])
          .range(['#00CCFF', '#E64C66']);

        var template = _.template("
        <div class='row'>
          <div class='col-xs-12 text-center'>
            <% if(d.progress.completed) { %>
              <span class='fa fa-certificate muted' title='The community has completed this Quest.'></span>

            <% } else if (d.user.completed) { %>
              <span class='fa fa-check' title='You have completed this Quest.'></span>

            <% } else if (!d.user.enabled) { %>
              <span class='fa fa-circle muted' title='This quest is not enabled.'></span>

            <% } else { %>
              <a href='/quest/<%- d.id %>/' title='Click to start this quest!'><p style='font-size: 1.75em; line-height: 1.8em;'><%- d.name %></p></a>

            <% } %>
          </div>
        </div>

        <% if(d.user.enabled) { %>
          <div class='row'>
            <div class='col-xs-12' title='This quest is <%- Math.round(progress) %>% complete.'>
              <div class='progress'>
                <div class='progress-bar' role='progressbar' aria-valuenow='<%- progress %>' aria-valuemin='0' aria-valuemax='100' style='width: <%- progress %>%;'>
                  <span><%- d.progress.current %> Completions</span>
                </div>
              </div>
            </div>
          </div>
        <% } %>
          ");

        var attrs = {
          'class': 'quest col-xs-4 col-sm-3 col-md-3 col-lg-2',
        };
        var styles = {
        };
        var quest = canvas.selectAll('.quest').remove();
        var quest = canvas.selectAll('.quest').data(quests);

        quest.enter().append('div')
          .attr(attrs)
          .style(styles)
          .html(function(d, i) {
            return template({
              'd': d,
              'progress': (d.progress.current/d.progress.required)*100,
              'completions_scale': completion_scale(d.completions),
            });
          });
        quest.transition().attr(attrs);
        quest.exit().remove();
      };


      var pk = #{group.pk};
      var template = _.template("
        <h3><%- name %></h3>
        <div id='group-<%- pk %>' class='row head-space paragraph-box'>
          <div class='col-xs-12 text-center'>
            <h2 class='quest-loading'>Loading...</h2>
          </div>
        </div>");
      $('#group-selection').append(template({'pk': pk}));

      $.ajax({
        'type': 'GET',
        'url': '/api/quest/'+ pk +'/',
        'success': function(data) {
          draw_dashboard({'pk': pk}, data);

          $('#group-selection .quest').click(function(evt) {
            var link = $(this).find('a');
            if(link.length) { location.href=link.attr('href'); }
          });

        }
      });

    script
        /*
        var margin = {top: 30, right: 40, bottom: 30, left: 50},
            width = 600 - margin.left - margin.right,
            height = 270 - margin.top - margin.bottom;

        var parseDate = d3.time.format("%Y-%m-%dT%H:%M:%SZ").parse;

        var x = d3.time.scale().range([0, width]);
        var y0 = d3.scale.linear().range([height, 0]);
        var y1 = d3.scale.linear().range([height, 0]);

        var xAxis = d3.svg.axis().scale(x)
          .orient("bottom").ticks(5);

        var yAxisLeft = d3.svg.axis().scale(y0)
          .orient("left").ticks(5);

        var yAxisRight = d3.svg.axis().scale(y1)
          .orient("right").ticks(5);

        var valueline = d3.svg.line()
          .x(function(d) { return x(d.date); })
          .y(function(d) { return y0(d.fscore); });

        var valueline2 = d3.svg.line()
          .x(function(d) { return x(d.date); })
          .y(function(d) { return y1(d.pairings); });

        var svg = d3.select("#chart")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        d3.json('/api/analysis/group/1/?format=json', function(error, data) {

          data.forEach(function(d) {
            d.date = parseDate(d.created);
            d.fscore = d['f-score'];
          });


          x.domain(d3.extent(data, function(d) { return d.date; }));
          y0.domain([0, 1]);
          y1.domain([0, _.max(_.pluck(data, 'pairings'))*1.2 ]);

          svg.append("path")
            .style("stroke", "#7F3CFF")
            .attr("d", valueline(data));

          svg.append("path")
            .style("stroke", "#E85997")
            .attr("d", valueline2(data));

          svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

          svg.append("g")
            .attr("class", "y axis")
            .style("fill", "#7F3CFF")
            .call(yAxisLeft);

          svg.append("g")
            .attr("class", "y axis")
            .attr("transform", "translate(" + width + " ,0)")
            .style("fill", "#E85997")
            .call(yAxisRight);
        });
        */



