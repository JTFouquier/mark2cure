extends base

- load widget_tweaks
- load comments
- load group


block header
  - with headerMessage=group.name
    include includes/header


block content
  #group-network.container-fluid
    .row

      #control-pane.col-xs-2
        .row
          .col-xs-12
            h3 Min Degree <span id="min-degree-val">0</span>
            input(id="min-degree", type="range", min="0", max="100", value="0").control-group
            hr

          .col-xs-12
            .checkbox
              label
                input#personal-contributions(type="checkbox", value="")
                option Highlight Personal Contributions
            hr

          .col-xs-12
            h3 Username search
            input#username-search(type="text", placeholder="username").form-control
            hr

          .col-xs-12
            a#reset-btn.btn.btn-default Reset filters

      #chart(style="height:800px;").col-xs-10



block post-footer
  script.
    var username = "{{user.username}}";
    var s = new sigma({
      container: 'chart',
      settings: {

        defaultLabelColor: "#000",
        defaultLabelSize: 12,
        defaultLabelBGColor: "#ddd",
        defaultHoverLabelBGColor: "#002147",
        defaultLabelHoverColor: "#fff",

        edgeColor: 'default',
        defaultEdgeColor: '#e7e7e7',

        labelThreshold: 10,
        defaultEdgeType: "curve",

        hoverFontStyle: "bold",
        fontStyle: "regular",
        activeFontStyle: "regular",

        minNodeSize: 2,
        maxNodeSize: 5,
        minEdgeSize: 0.0001,
        maxEdgeSize: 0.1,

        zoomMin: .00001,
        zoomMax: 1,
      }
    });
    var filter = new sigma.plugins.filter(s);

    sigma.parsers.json('/static/data/network_cdg.json', s, function() {
      s.refresh();

      maxDegree = 0;
      s.graph.nodes().forEach(function(n) {
        maxDegree = Math.max(maxDegree, s.graph.degree(n.id));
      });
      $('#min-degree').attr('max', maxDegree/3)

    });
    s.refresh();
    s.bind('clickNode', function(e) {
      console.log(e.type, e.data.node.label, e.data.captor);
      if(e.type == 'clickNode') {
        window.open('https://www.google.com/#safe=off&q='+e.data.node.label,'_blank');
      }
    });

    $('#min-degree').on('change', function() {
      var min_degree_num = $(this).val();

      $('#min-degree-val').html(min_degree_num);
      filter
        .undo('min-degree')
        .nodesBy(function(n) {
          return this.degree(n.id) >= min_degree_num;
        }, 'min-degree').apply();
    });

    $('#personal-contributions').on('click', function() {
      var checked = $(this).is(':checked');
      s.graph.edges().forEach(function(e) {
        if(e.attributes.user == username) {
          e.color = checked ? 'black' : '#e7e7e7';
        }
      });
      s.refresh();
    });

    $('#username-search').on('keyup', function() {
      var term = $(this).val();
      if(term) {
        filter
          .undo('edge-contributor')
          .edgesBy(function(edge) {
            return edge.attributes.user.indexOf(term) > -1
          }, 'edge-contributor').apply();
      } else {
        filter.undo('edge-contributor').apply();
      }
    });

    $('#reset-btn').on('click', function() {
      $('#personal-contributions').removeProp('checked');
      $('#username-search').val('');
      filter.undo().apply();
    });

