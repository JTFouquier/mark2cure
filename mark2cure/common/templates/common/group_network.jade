extends base

- load widget_tweaks
- load comments
- load group


block header
  - with headerMessage=group.name
    include includes/header


block content
  .container-fluid
    .row
      #chart(style="height:800px;").col-xs-10.col-xs-offset-1


block post-footer
  script.
    var s = new sigma({
      container: 'chart',

      settings: {
        "labelThreshold": 6,
        "hoverFontStyle": "bold",

        "defaultEdgeType": "curve",
        "defaultLabelColor": "#000",
        "defaultLabelHoverColor": "#fff",
        "defaultLabelSize": 14,

        "activeFontStyle": "bold",
        "fontStyle": "bold",
        "defaultHoverLabelBGColor": "#002147",
        "defaultLabelBGColor": "#ddd",

        "minRatio": 0.75,
        "maxRatio": 20,

        "minEdgeSize": 0.2,
        "maxNodeSize": 7,
        "maxEdgeSize": 0.5,
        "minNodeSize": 1
      }
    });

    console.log('[SIGMA LOG] Loading...');
    sigma.parsers.json('/api/network/{{group.pk}}/', s, function() {
      console.log('[SIGMA LOG] Loaded');
      s.refresh();
    });
    s.refresh();

    /*
    sigInst.bind('overnodes',function(event){
      var nodes = event.content;
      var neighbors = {};

      sigInst.iterEdges(function(e){
        if(nodes.indexOf(e.source)<0 && nodes.indexOf(e.target)<0){
          if(!e.attr['grey']){
            e.attr['true_color'] = e.color;
            e.color = greyColor;
            e.attr['grey'] = 1;
          }
        } else {
          e.color = e.attr['grey'] ? e.attr['true_color'] : e.color;
          e.attr['grey'] = 0;

          neighbors[e.source] = 1;
          neighbors[e.target] = 1;
        }
      }).iterNodes(function(n){
        if(!neighbors[n.id]){
          if(!n.attr['grey']){
            n.attr['true_color'] = n.color;
            n.color = greyColor;
            n.attr['grey'] = 1;
          }
        } else {
          n.color = n.attr['grey'] ? n.attr['true_color'] : n.color;
          n.attr['grey'] = 0;
        }
      }).draw(2,2,2);

    }).bind('outnodes',function(){
      sigInst.iterEdges(function(e){
        e.color = e.attr['grey'] ? e.attr['true_color'] : e.color;
        e.attr['grey'] = 0;
      }).iterNodes(function(n){
        n.color = n.attr['grey'] ? n.attr['true_color'] : n.color;
        n.attr['grey'] = 0;
      }).draw(2,2,2);
    });

    sigInst.draw();
    */
