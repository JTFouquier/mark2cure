extends base

- load humanize

block content
    include document/includes/instructions

    - for sec in sections
        .row
          - if user.is_authenticated and user_profile.mturk == False
              .col-sm-10.col-sm-offset-1
                h4
                  | #{ sec.get_kind_display }

          .col-sm-10.col-sm-offset-1.head-space.game
            div(id="{{ sec.pk }}").paragraph.entity_tag
              p
                | #{ sec.text } 


    include document/controls-game


block post-footer
    - if user.is_authenticated == False
      script.
        $('#instructions').show()

    <script id="word-template" type="text/template"><% if(neighbor) { %><%= text %><% } else { %><%= text %> <% } %></script>
    script.
      var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
      var isFirefox = typeof InstallTrigger !== 'undefined';   // Firefox 1.0+
      var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
      var isChrome = !!window.chrome && !isOpera;              // Chrome 1+
      var isIE = /*@cc_on!@*/false || !!document.documentMode;   // At least IE6

      if(!isChrome && !isSafari) {
        alert("Google Chrome or Safari required.")
      }

      $('#instructions_toggle').click(function() {
        $('#instructions').toggle()
      });

      var sections = {};
      var section_selectors = {};
      YPet.addInitializer(function(options) {

        $( ".game .paragraph" ).each(function( index ) {
          var section_id = $(this).attr('id'),
              section_text = $(this).text().trim();

          sections[ section_id ] = section_text;
          section_selectors[ section_id ] = '#'+section_id;
        });

        // Create our regions
        YPet.addRegions(section_selectors);

        // Add our views for each section
        _.each( _.keys(sections), function(key) {
          var p = new Paragraph({'text': sections[key] })
          p.parseText();
          var view = new WordCollectionView({collection: p.get('words')});
          YPet[key].show( view );
        });

      });

      YPet.start();

      $('button.done').click(function(evt) {
        $(this).attr('disabled', 'disabled');
        //-- Submit the annotations to the server, then tell the server
        //-- you're done with that document.

        //-- We prevent this or else Django gives broken pipe b/c we need to
        //-- wait for the ajax submissions to close before reloading the page
        evt.preventDefault();
        var counter = 0,
            ann_counter = 0;

        //-- Iterate over each of the paragraphs or annotatable sections on the page
        _.each( _.keys(sections), function(key) {
          var annotations = YPet[key].currentView.collection.parentDocument.get('annotations').toJSON(),
              url = '/document/{{ doc.pk }}/section/'+ key +'/annotation/create/';
          ann_counter += annotations.length;

          //-- Iterate over each of the annotations within that section
          _.each(annotations, function(annotation) {
            $.ajax({
              type: 'POST',
              url: url,
              data: $.extend({'csrfmiddlewaretoken': '{{ csrf_token }}'}, annotation),
              cache: false,
              async: false,
              success: function() { counter++; },
            });
          });
        });

        //-- If they all got sent to the server, let's move on
        if(counter === ann_counter) {
          $('#document_submit').submit();
        } else {
          alert('There was a problem submissing this document. Please try another.')
        }

      });
