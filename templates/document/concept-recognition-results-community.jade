extends base

- load humanize

block content

    .row
      .col-sm-8.col-sm-offset-2
        .alert.alert-success
          h3.text-center
            | Compare your annotations to other workers.

    - for section in sections
        .row
          .col-sm-10.col-sm-offset-1
            h4
              | #{ section.get_kind_display }

          .col-sm-10.col-sm-offset-1.head-space.game
            div(id="{{ section.pk }}").paragraph.results
              p
                - for indexes, text, counter, gm_pk, user_pk, user_annotated in section.words
                  span( data-counter="{{ counter }}",
                        data-starti="{{ indexes.0 }}",
                        data-stopi="{{ indexes.1 }}",
                        data-gmannid="{{ gm_pk }}",
                        data-uannid="{{ user_pk }}")
                    | #{ text }


    .row
      .col-sm-3.col-sm-offset-1
        table.table
          tbody
            tr
              td
                div(style="height: 16px; width: 16px; background-color: #0cf")
              td
                | Your annotations


    include document/controls-results

block post-footer
    - if user_profile.mturk
      script.
        $("#document_submit").submit(function(evt) {
          evt.preventDefault();
          evt.stopPropagation();

          // If the document was completed forget the rest and submit the mturk ajax request to move the turker
          $('#worker_submit').submit();
        });

    script.
        var $sections = $('div.paragraph p');
        var color_scale = d3.scale.ordinal().domain([0,1,2,3,4]).range(['#00E820', '#E83008', '#0073FF', '#FFD200', '#0073FF']);

        var generate_legend = function(data) {
            _.each(data, function(item, i) {
              $('tbody').append('<tr><td><div style="height: 10px; width: 16px; border-bottom:5px solid '+color_scale(i)+'"></div></td><td>User '+item.id+'</td></tr>')
            });
        };

        var handle_annotations = function(document_id, section_id, user_id, depth_index) {
          //-- Add the other community memebers annotations
          $.ajax({
            type: 'GET',
            url: '/document/'+ document_id +'/section/'+ section_id +'/user/'+ user_id +'/annotations/?format=json',
            cache: false,
            success: function(data) {

              var $el = $('div.paragraph#'+ section_id);
              _.each(data, function(annotation) {
                // console.log(' - - - - - - - ');
                var $word = $el.find("p span[data-starti='"+ annotation.start +"']");
                if( $word.length == 1 ) {
                  var neighbor = $word.next(),
                      position = $word.position(),
                      // The height is always a consistant value
                      height = $word.height(),
                      width = $word.width();

                  // Track this annotation's lines, and we
                  // know where the line will start
                  var lines = [];
                  lines.push({
                    'x1': position.left,
                    'y1': position.top + height + 2 + (depth_index * 3)
                  });

                  var current_line_index = 0;

                  //malignant transformation from notochordal remnants
                  //Notochord-related lesions of the spinal column
                  // console.log(annotation, ' | ', annotation.text.length, $word.html().trim().length);
                  // If the word has chars that were sanitized or don't span
                  if($word.html().trim().length >= annotation.text.length) {
                    lines[0]['x2'] = $word.position().left + $word.width();
                    lines[0]['y2'] = $word.position().top + height + 2 + (depth_index * 3);
                  } else {
                    do {
                        lines[current_line_index]['x2'] = $word.position().left + $word.width();
                        lines[current_line_index]['y2'] = $word.position().top + height + 2 + (depth_index * 3);
                        // console.log(($word.data('starti') - annotation.start), ' | ', annotation.text.length, ' | ', current_line_index, ' | ', lines);
                        if(neighbor.length) {
                            if($word.position().top != neighbor.position().top && neighbor.data('starti') - annotation.start < annotation.text.length) {
                              lines.push({
                                'x1': neighbor.position().left,
                                'y1': neighbor.position().top + height + 2 + (depth_index * 3)
                              });
                              current_line_index += 1;
                            }
                            $word = neighbor;
                            neighbor = $word.next();
                        }
                      }
                      while( $word.data('starti') - annotation.start < annotation.text.length );
                  }
                  // console.log(lines);

                  // Draw the actual line(s) onto the page
                  // with the computed coordinates
                  var grid = $el.find('svg')[0],
                      lines = d3.select(grid).selectAll('.foo').data(lines)
                      .enter()
                          .append("line")
                              .attr("x1", function(d) { return d['x1'] })
                              .attr("y1", function(d) { return d['y1'] })
                              .attr("x2", function(d) { return d['x2'] })
                              .attr("y2", function(d) { return d['y2'] })
                              .attr("stroke-width", 2)
                              .attr("stroke", function() { return color_scale(depth_index);} );


                }
              });
            },
          });
        };


        $.each($sections, function(idx, i) {
          var section = $(this);
          var $words = section.find('span');
          var document_id = #{ doc.pk }
          var section_id = +section.parent().attr('id');

          //-- Add the current users recently submitted annotations
          $.each($words, function(w) {
            var word = $(this),
                next_word = word.next(),

                u_ann = word.data('uannid'),
                next_word_u_ann = next_word.data('uannid');


            if(u_ann != "None") { word.addClass('user_annotated'); }

            if( u_ann != "None" && u_ann != next_word_u_ann ) {
              word.html( word.html().trim() );
              word.addClass('neighbor_u');
            }
          });

          d3.select(section[0]).append("svg").attr("width", section.width()).attr("height", section.height());
          //-- Add the other community memebers annotations
          $.ajax({
            type: 'GET',
            url: '/document/'+ document_id +'/section/'+ section_id +'/results/top/?format=json',
            cache: false,
            async: false,
            success: function(data) {
              if(idx == 0) { generate_legend(data); }

              _.each(data, function(item, i) {
                handle_annotations(document_id, section_id, item.id, i);
              });
            },
          });


        });



