<script id="word-template" type="text/template"><% if(neighbor) { %><%= text %><% } else { %><%= text %> <% } %></script>
<script id="alert-template" type="text/template"><div class="alert alert-warning alert-dismissible" role="alert"><button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>Sorry! <strong><%= selection %></strong> doesn't appear to be correct. <strong><%= help_message %></strong></div></script>
script.
  var validate = function(needle, gold) {
    var all_match = true;

    _.each(gold, function(gold_item) {
      var matches = _.filter(needle.models, function(obj) {
        return obj.get('start') == gold_item.start && obj.get('text') == gold_item.text }).length;
      if(!matches) { all_match = false; }
    });

    return all_match;
  };

  $('#next-container').popover({
    trigger: "hover",
    title: "Keep Going!",
    content: "Please complete the task before moving forward.",
    placement: "top",
    container: "body"
  });

  YPet.addInitializer(function(options) {
    YPet.addRegions({'quest': '#quest'});
    var p = new Paragraph({'text': $('#quest').text().trim()});
    p.parseText();
    var view = new WordCollectionView({collection: p.get('words')});
    YPet['quest'].show(view);
  });
  YPet.start();

  var correct = function() {
    $('#partner').slideDown();
    $('#next-container').popover('disable');
    $('#next').attr('disabled', false);
  };

  YPet['quest'].currentView.collection.parentDocument.get('annotations').on('add', function(model, collection) {
    /*
    * Check if the array doesn't contain the selected word.
    * 1) Alert if (contains/overlap/miss)error 2) Unselect
    */
    if( !_.filter(answers, function(obj) { return model.get('start') == obj.start && model.get('text') == obj.text; }).length ) {
      var template_data = {
        'selection': model.get('text'),
        'help_message': ''};
      /*
      * Overlaps (start or before) check
      */
      if( _.filter(answers, function(answer) {
        return  model.get('start') < answer.start &&
                _.str.include(model.get('text'), answer.text); }).length ) {
        template_data.help_message = "(Please check that your selection only includes required terms)";
      }

      if( _.filter(answers, function(answer) {
        return  model.get('start') >= answer.start &&
                model.get('start')+model.get('text').length > answer.start+answer.text.length &&
                _.str.include(model.get('text'), answer.text); }).length ) {
        template_data.help_message = "(Please check that your selection only includes required terms)";
      }

      /*
      * Contains check
      */
      if( _.filter(answers, function(answer) {
        return  model.get('start') >= answer.start &&
                model.get('start')+model.get('text').length <= answer.start+answer.text.length &&
                _.str.include(answer.text, model.get('text')); }).length ) {
        template_data.help_message = "(Please check that your selection contains all required words)";
      }

      var temp = _.template($('#alert-template').html());
      $('#quest-alerts').fadeOut('fast', function() {
        $(this).html(temp(template_data));
        $(this).fadeIn('fast');
      });

      YPet['quest'].currentView.children.each(function(view, idx) {
        if(model.get('start') == view.model.get('start')) {
          view.$el.trigger('mousedown');
          view.$el.trigger('mouseup');
        };
      });
    } else {
     $('#quest-alerts').fadeOut('fast');
     validation_check(collection);
    };
  });
  YPet['quest'].currentView.collection.parentDocument.get('annotations').on('remove', function(model, collection) { validation_check(collection); });
