<script id="word-template" type="text/template"><% if(neighbor) { %><%= text %><% } else { %><%= text %> <% } %></script>
<script id="alert-template" type="text/template">
<div class="alert alert-warning" role="alert">
<div class="row"><div class="col-xs-10 col-xs-offset-1 text-center"><p class="lead">Sorry! <strong><%= selection %></strong> doesn't appear to be correct.</p></div></div>
<div class="row"><div class="col-xs-10 col-xs-offset-1 text-center"><%= help_message %></div></div>
</div>
</script>

script.
  var textControl = function(fade, start_index, end_index, region) {
    fade = fade || 'in';
    start_index = start_index || 0;
    end_index = end_index || 10000;
    region = region || 'quest-2';

    YPet[region].currentView.children.each(function(view, idx) {
      if(idx >= start_index && idx <= end_index) {
        if (fade == 'out') {
          view.$el.fadeOut();
        } else {
          view.$el.fadeIn();
        }
      }
    });
  };

  var validate = function(needle, gold, slice) {
    var all_match = true;
    slice = slice || false;
    if(slice) { gold = gold.slice(0, slice); }

    _.each(gold, function(gold_item) {
      var matches = _.filter(needle.models, function(obj) {
        return obj.get('start') == gold_item.start && obj.get('text') == gold_item.text }).length;
      if(!matches) { all_match = false; }
    });

    return all_match;
  };

  $('#next-container').popover({
    trigger: "hover",
    title: "Keep Going!",
    content: "Please complete the task before moving forward.",
    placement: "top",
    container: "body"
  });

  $('#quest-alerts').affix({
    offset: {
      top: function() { return $('#quest-1').position().top-60 },
      bottom: function () {
        return (this.bottom = $('.footer').outerHeight(true))
      }
    },
  });

  YPet.addInitializer(function(options) {
    YPet.addRegions({'quest-1': '#quest-1'});
    var p = new Paragraph({'text': $('#quest-1').text().trim()});
    p.parseText();
    var view = new WordCollectionView({collection: p.get('words')});
    YPet['quest-1'].show(view);

    YPet.addRegions({'quest-2': '#quest-2'});
    var p = new Paragraph({'text': $('#quest-2').text().trim()});
    p.parseText();
    var view = new WordCollectionView({collection: p.get('words')});
    YPet['quest-2'].show(view);
  });
  YPet.start();

  var correct1 = function() {
    $('#quest-2').slideDown();
  };

  var correct2 = function() {
    $('#partner').slideDown();
    $('#next-container').popover('disable');
    $('#next').attr('disabled', false);
  };

  var check_common_mistakes = function(text) {
    msg = "";
    switch (text) {
      case "Familial Mediterranean fever ( FMF":
      case "Duchenne muscular dystrophy ( DMD":
      case "Friedreich ataxia ( FRDA":
        msg = "<p>Treat disease abbreviations like the words they represent. Don't mark them as a single span with the disease terms they represent. Eg- <span class='selected'>Bipolar Disorder</span> ( <span class='selected'>BD</span> ) = Bipolar Disorder (Bipolar Disorder) and should not be marked as 2 distinct instances of the disease</p>";
        break;

      case "unfavorable renal prognosis":
      case "inherited disorder":
      case "disease":
      case "severe neurodegenerative disease":
      case "Duchenne muscular":
      case "mutation":
      case "mutation rates":
      case "dystrophy":
      case "Friedreich":
        msg = "<p>Do not mark generic terms such as 'disorder', 'neurodegenerative', 'prognosis', 'mutation', 'disease' unless they are part of the disease name such as in 'Bipolar disorder' or 'Alzheimer disease'.</p>";
        break;

      case "breast cancer":
      case "amyloidosis":
        msg = "<p>If a descriptive term specifies a particular form of the disease, mark it as part of the disease conjunction eg- congenital heart disease.</p>";
        break;

      case "Dutch breast cancer":
      case "breast cancer families":
      case "Friedreich ataxia locus 65":
      case "FRDA locus":
        msg = "<p>If a descriptive term does not specify a particular form of the disease, do not mark that term. Do not mark non-disease terms that are modified by disease terms such as 'family', 'gene', 'locus', 'patients'.</p>";
        break;

      case "renal amyloidosis and arthritis":
        msg = "<p>When marking disease symptoms, if the symptoms can stand alone, mark them as individual symptoms.</p>";
        break;

      case "MEFV":
      case "BRCA1":
        msg = "<p>Do not mark abbreviations unless you're sure it represents a disease. It could just be a gene name.</p>";
        break;

      case "colchicine":
        msg = "<p>Do not mark drug names.</p>";
        break;

      case "Duchenne":
      case "muscular":
      case "dystrophy":
      case "ovarian cancer":
      case "breast":
      case "cancer":
      case "ovarian":
      case "breast":
      case "breast / ovarian":
        msg = "<p>Mark disease conjunctions as spans. For example, mark 'heart disease' not 'heart'. The term 'heart' alone is not a disease.</p>";
        break;
    };

    return msg
  };

  YPet['quest-1'].currentView.collection.parentDocument.get('annotations').on('add', function(model, collection) {
    /*
    * Check if the array doesn't contain the selected word.
    * 1) Alert if (contains/overlap/miss)error 2) Unselect
    */
    if( !_.filter(answers1, function(obj) { return model.get('start') == obj.start && model.get('text') == obj.text; }).length ) {
      var template_data = {
        'selection': model.get('text'),
        'help_message': ''};

      /*
      * Overlaps (start or before) check
      */
      if( _.filter(answers1, function(answer) {
        return  model.get('start') < answer.start &&
                _.str.include(model.get('text'), answer.text); }).length ) {
        template_data.help_message = "<p>(Please check that your selection <strong>only</strong> includes required terms)</p>";
      }

      if( _.filter(answers1, function(answer) {
        return  model.get('start') >= answer.start &&
                model.get('start')+model.get('text').length > answer.start+answer.text.length &&
                _.str.include(model.get('text'), answer.text); }).length ) {
        template_data.help_message = "<p>(Please check that your selection <strong>only</strong> includes required terms)</p>";
      }

      /*
      * Contains check
      */
      if( _.filter(answers1, function(answer) {
        return  model.get('start') >= answer.start &&
                model.get('start')+model.get('text').length <= answer.start+answer.text.length &&
                _.str.include(answer.text, model.get('text')); }).length ) {
        template_data.help_message = "<p>(Please check that your selection contains <strong>all</strong> required words)</p>";
      }

      var specific_message = check_common_mistakes(model.get('text'));
      if(specific_message.length) {
        template_data.help_message = specific_message;
      }

      var temp = _.template($('#alert-template').html());
      $('#quest-alerts').fadeOut('fast', function() {
        $(this).html(temp(template_data));
        $(this).fadeIn('fast');
      });

      YPet['quest-1'].currentView.children.each(function(view, idx) {
        if(model.get('start') == view.model.get('start')) {
          view.$el.trigger('mousedown');
          view.$el.trigger('mouseup');
        };
      });
    } else {
      $('#quest-alerts').fadeOut('fast');
      validation_check1(collection);
    };
  });
  YPet['quest-1'].currentView.collection.parentDocument.get('annotations').on('remove', function(model, collection) { validation_check1(collection); });

  YPet['quest-2'].currentView.collection.parentDocument.get('annotations').on('add', function(model, collection) {
    /*
    * Check if the array doesn't contain the selected word.
    * 1) Alert if (contains/overlap/miss)error 2) Unselect
    */
    if( !_.filter(answers2, function(obj) { return model.get('start') == obj.start && model.get('text') == obj.text; }).length ) {
      var template_data = {
        'selection': model.get('text'),
        'help_message': ''};

      /*
      * Overlaps (start or before) check
      */
      if( _.filter(answers2, function(answer) {
        return  model.get('start') < answer.start &&
                _.str.include(model.get('text'), answer.text); }).length ) {
        template_data.help_message = "(Please check that your selection only includes required terms)";
      }

      if( _.filter(answers2, function(answer) {
        return  model.get('start') >= answer.start &&
                model.get('start')+model.get('text').length > answer.start+answer.text.length &&
                _.str.include(model.get('text'), answer.text); }).length ) {
        template_data.help_message = "(Please check that your selection only includes required terms)";
      }

      /*
      * Contains check
      */
      if( _.filter(answers2, function(answer) {
        return  model.get('start') >= answer.start &&
                model.get('start')+model.get('text').length <= answer.start+answer.text.length &&
                _.str.include(answer.text, model.get('text')); }).length ) {
        template_data.help_message = "(Please check that your selection contains all required words)";
      }

      var specific_message = check_common_mistakes(model.get('text'));
      if(specific_message.length) {
        template_data.help_message = specific_message;
      }

      var temp = _.template($('#alert-template').html());
      $('#quest-alerts').fadeOut('fast', function() {
        $(this).html(temp(template_data));
        $(this).fadeIn('fast');
      });

      YPet['quest-2'].currentView.children.each(function(view, idx) {
        if(model.get('start') == view.model.get('start')) {
          view.$el.trigger('mousedown');
          view.$el.trigger('mouseup');
        };
      });
    } else {
      $('#quest-alerts').fadeOut('fast');
      validation_check2(collection);
    };
  });
  YPet['quest-2'].currentView.collection.parentDocument.get('annotations').on('remove', function(model, collection) { validation_check2(collection); });
